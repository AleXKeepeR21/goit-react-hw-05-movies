{"version":3,"file":"static/js/871.29160f7a.chunk.js","mappings":"mOAOaA,EAAa,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC3B,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAsCC,EAAAA,EAAAA,UAASJ,GAA/C,eAAOK,EAAP,KAAoBC,EAApB,KACMC,ECNmB,SAACP,EAAOQ,GACjC,OAA4CJ,EAAAA,EAAAA,UAASJ,GAArD,eAAOS,EAAP,KAAuBC,EAAvB,KACMC,GAAaC,EAAAA,EAAAA,QAAO,MAU1B,OARAC,EAAAA,EAAAA,YAAU,WAIR,OAHAF,EAAWG,QAAUC,YAAW,WAC9BL,EAAkBV,EACnB,GAAEQ,GACI,WACLQ,aAAaL,EAAWG,QACzB,CACF,GAAE,CAACd,EAAOQ,IACJC,CACR,CDP8BQ,CAAYZ,EALrB,KAgBpB,OATAQ,EAAAA,EAAAA,YAAU,WACR,IAAKN,EAGH,OAFAL,EAAagB,OAAO,cACpBf,EAAgBD,GAGlBC,EAAgB,CAAEH,MAAOO,GAC1B,GAAE,CAACL,EAAcK,EAAsBJ,KAGtC,kBACEgB,YAAY,0BACZC,SAAU,SAAAC,GAAG,OAAIf,EAAee,EAAIC,OAAOC,MAA9B,EACbA,MAAOlB,GAGZ,EEWD,EAhCyB,WAAO,IAAD,EAC7B,GAAuBJ,EAAAA,EAAAA,MAAhBC,GAAP,eACA,GAA4BE,EAAAA,EAAAA,UAAS,IAArC,eAAOoB,EAAP,KAAeC,EAAf,KACMzB,EAAK,UAAGE,EAAawB,IAAI,gBAApB,QAAgC,GAa3C,OAXAb,EAAAA,EAAAA,YAAU,WACJb,IACF2B,EAAAA,EAAAA,IAAkB3B,GAAO4B,KAAKH,EAEjC,GAAE,CAACzB,KAQF,iCAEE,SAACD,EAAD,CAAYC,MAAOA,KAEnB,wBACGwB,EAAOK,KAAI,SAAAC,GAAK,OACf,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAA3B,SAAkCF,EAAMG,SADjCH,EAAME,GADA,QAQxB,C","sources":["components/Movies/MoviesPage/MoviesPage.jsx","components/Hooks/useDebounce.jsx","components/Movies/MoviesPage/MoviesPageSearch.jsx"],"sourcesContent":["import { useDebounce } from 'components/Hooks/useDebounce';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nconst DEBOUNCE_TIME = 500;\n\nexport const MoviesPage = ({ query }) => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchQuery, setSearchQuery] = useState(query);\n  const debauncedSearchQuery = useDebounce(searchQuery, DEBOUNCE_TIME);\n\n  useEffect(() => {\n    if (!debauncedSearchQuery) {\n      searchParams.delete('query');\n      setSearchParams(searchParams);\n      return;\n    }\n    setSearchParams({ query: debauncedSearchQuery });\n  }, [searchParams, debauncedSearchQuery, setSearchParams]);\n\n  return (\n    <input\n      placeholder=\"Enter your search query\"\n      onChange={evt => setSearchQuery(evt.target.value)}\n      value={searchQuery}\n    />\n  );\n};\n","import { useRef } from 'react';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\n\nexport const useDebounce = (query, debounceTime) => {\n  const [debouncedQuery, setDebouncedQuery] = useState(query);\n  const timeoutRef = useRef(null);\n\n  useEffect(() => {\n    timeoutRef.current = setTimeout(() => {\n      setDebouncedQuery(query);\n    }, debounceTime);\n    return () => {\n      clearTimeout(timeoutRef.current);\n    };\n  }, [query, debounceTime]);\n  return debouncedQuery;\n};\n","import { fetchSearchMovies } from 'FetchMovies/FetchMovies';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport { MoviesPage } from './MoviesPage';\n\nconst MoviesPageSearch = () => {\n  const [searchParams] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n  const query = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (query) {\n      fetchSearchMovies(query).then(setMovies);\n    }\n  }, [query]);\n\n  // const changeParams = params => {\n  //   setSearchParams(params !== '' ? { query: params } : {});\n  //   setMovies(1);\n  // };\n\n  return (\n    <>\n      {/* <MoviesPage query={query} onSubmit={changeParams} /> */}\n      <MoviesPage query={query} />\n\n      <ul>\n        {movies.map(movie => (\n          <li key={movie.id}>\n            <Link to={`/movies/${movie.id}`}>{movie.title}</Link>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default MoviesPageSearch;\n"],"names":["MoviesPage","query","useSearchParams","searchParams","setSearchParams","useState","searchQuery","setSearchQuery","debauncedSearchQuery","debounceTime","debouncedQuery","setDebouncedQuery","timeoutRef","useRef","useEffect","current","setTimeout","clearTimeout","useDebounce","delete","placeholder","onChange","evt","target","value","movies","setMovies","get","fetchSearchMovies","then","map","movie","to","id","title"],"sourceRoot":""}